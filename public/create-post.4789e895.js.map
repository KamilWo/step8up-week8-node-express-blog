{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,ECGA,eAAe,EAAQ,CAAG,CAAE,EAAU,CAAC,CAAC,EACtC,GAAI,CACF,IAAM,EAAW,MAAM,MAAM,AALhB,OAK2B,EAAK,GAC7C,GAAI,CAAC,EAAS,EAAE,CAAE,CAChB,IAAM,EAAY,MAAM,EAAS,IAAI,EACrC,OAAM,AAAI,MAAM,EAAU,OAAO,EAAI,4BACvC,CACA,GAAI,AAAoB,MAApB,EAAS,MAAM,CACjB,OAAO,KAET,OAAO,EAAS,IAAI,EACtB,CAAE,MAAO,EAAO,CAEd,MADA,QAAQ,KAAK,CAAC,qBAAsB,GAC9B,CACR,CACF,C,E,E,O,C,S,I,G,E,E,O,C,W,I,G,E,E,O,C,a,I,G,E,E,O,C,gB,I,GAeO,IAAM,EAAS,IAAM,EAAQ,eAAgB,CAAC,OAAQ,MAAM,GAGtD,EAAW,CAAC,EAAa,IAAI,GAEjC,EADK,EAAa,CAAC,gBAAgB,EAAE,EAAA,CAAY,CAAG,UAIhD,EAAa,AAAC,GACzB,EAAQ,SAAU,CAChB,OAAQ,OACR,QAAS,CAAE,eAAgB,kBAAmB,EAC9C,KAAM,KAAK,SAAS,CAAC,EACvB,GAYW,EAAgB,IAAM,EAAQ,c,G,I,E,E,SCxD3C,MAAM,EAAW,SAAS,cAAc,CAAC,aACnC,EAAsB,SAAS,cAAc,CAAC,wBAC9C,EAAe,SAAS,cAAc,CAAC,cAK7C,eAAe,IACb,GAAI,CACF,IAAM,EAAa,MAAM,EAAzB,aAAA,EACA,CAAA,EAAoB,SAAS,CAAG,GAChC,EAAW,OAAO,CAAC,AAAC,IAClB,IAAM,EAAkB,SAAS,aAAa,CAAC,MAC/C,CAAA,EAAgB,SAAS,CAAG,gBAC5B,EAAgB,SAAS,CAAG;AACU,4CAAA,EAAE,EAAS,EAAE,CAAC,4BAA4B,EAAE,EAAS,EAAE,CAAC;AACvE,6BAAA,EAAE,EAAS,EAAE,CAAC,EAAE,EAAE,EAAS,IAAI,CAAC;AACvD,MAAA,CAAC,CACD,EAAoB,WAAW,CAAC,EAClC,EACF,CAAE,MAAO,EAAO,CACd,EAAoB,SAAS,CAAG,6BAChC,QAAQ,KAAK,CAAC,4BAA6B,EAC7C,CACF,CAKA,EAAS,gBAAgB,CAAC,SAAU,MAAO,IACzC,EAAE,cAAc,GAChB,EAAa,KAAK,CAAC,OAAO,CAAG,OAE7B,IAAM,EAAW,IAAI,SAAS,GACxB,EAAQ,EAAS,GAAG,CAAC,SACrB,EAAU,EAAS,GAAG,CAAC,WACvB,EAAc,EAAS,MAAM,CAAC,eAEpC,GAAI,CACc,MAAM,EAAA,UAAA,CAAe,CAAE,MAAA,EAAO,QAAA,EAAS,YAAA,CAAY,GAEnE,OAAO,QAAQ,CAAC,IAAI,CAAG,GACzB,CAAE,MAAO,EAAO,CACd,EAAa,WAAW,CAAG,EAAM,OAAO,CACxC,EAAa,KAAK,CAAC,OAAO,CAAG,OAC/B,CACF,GAGA,SAAS,gBAAgB,CAAC,mBAAoB,KAC5C,GACF","sources":["<anon>","src/client/assets/js/api.js","src/client/assets/js/post-form.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire6684\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire6684\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"e1C8v\", function(module, exports) {\n\n$parcel$export(module.exports, \"logout\", () => $a35ebdc10bcdb39c$export$a0973bcfe11b05c9);\n$parcel$export(module.exports, \"getPosts\", () => $a35ebdc10bcdb39c$export$3790dc04c854c4c9);\n$parcel$export(module.exports, \"createPost\", () => $a35ebdc10bcdb39c$export$e1bef8d96c7ba086);\n$parcel$export(module.exports, \"getCategories\", () => $a35ebdc10bcdb39c$export$7a0f33e8df10bd94);\nconst $a35ebdc10bcdb39c$var$BASE_URL = '/api';\n// Generic fetch function\nasync function $a35ebdc10bcdb39c$var$request(url, options = {}) {\n    try {\n        const response = await fetch($a35ebdc10bcdb39c$var$BASE_URL + url, options);\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.message || 'An unknown error occurred');\n        }\n        if (response.status === 204) return null;\n        return response.json();\n    } catch (error) {\n        console.error('API request error:', error);\n        throw error;\n    }\n}\nconst $a35ebdc10bcdb39c$export$596d806903d1f59e = (email, password)=>$a35ebdc10bcdb39c$var$request('/auth/login', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            email: email,\n            password: password\n        })\n    });\nconst $a35ebdc10bcdb39c$export$6503ec6e8aabbaf = (username, email, password)=>$a35ebdc10bcdb39c$var$request('/auth/register', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            username: username,\n            email: email,\n            password: password\n        })\n    });\nconst $a35ebdc10bcdb39c$export$a0973bcfe11b05c9 = ()=>$a35ebdc10bcdb39c$var$request('/auth/logout', {\n        method: 'POST'\n    });\nconst $a35ebdc10bcdb39c$export$3790dc04c854c4c9 = (categoryId = null)=>{\n    const url = categoryId ? `/posts?category=${categoryId}` : '/posts';\n    return $a35ebdc10bcdb39c$var$request(url);\n};\nconst $a35ebdc10bcdb39c$export$e1bef8d96c7ba086 = (postData)=>$a35ebdc10bcdb39c$var$request(\"/posts\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(postData)\n    });\nconst $a35ebdc10bcdb39c$export$101f7e1827697acc = (postId)=>$a35ebdc10bcdb39c$var$request(`/posts/${postId}`);\nconst $a35ebdc10bcdb39c$export$431458ae9af46678 = (postId, postData)=>$a35ebdc10bcdb39c$var$request(`/posts/${postId}`, {\n        method: \"PUT\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(postData)\n    });\nconst $a35ebdc10bcdb39c$export$7a0f33e8df10bd94 = ()=>$a35ebdc10bcdb39c$var$request(\"/categories\");\n\n});\n\n\nvar $e1C8v = parcelRequire(\"e1C8v\");\nconst $ec20bab3ea3d9aa0$var$postForm = document.getElementById(\"post-form\");\nconst $ec20bab3ea3d9aa0$var$categoriesContainer = document.getElementById(\"categories-container\");\nconst $ec20bab3ea3d9aa0$var$errorMessage = document.getElementById(\"form-error\");\n/**\n * Fetches categories and populates them as checkboxes in the form.\n */ async function $ec20bab3ea3d9aa0$var$loadCategories() {\n    try {\n        const categories = await $e1C8v.getCategories();\n        $ec20bab3ea3d9aa0$var$categoriesContainer.innerHTML = \"\"; // Clear loader/previous content\n        categories.forEach((category)=>{\n            const checkboxWrapper = document.createElement(\"div\");\n            checkboxWrapper.className = \"checkbox-item\";\n            checkboxWrapper.innerHTML = `\n        <input type=\"checkbox\" id=\"category-${category.id}\" name=\"categoryIds\" value=\"${category.id}\">\n        <label for=\"category-${category.id}\">${category.name}</label>\n      `;\n            $ec20bab3ea3d9aa0$var$categoriesContainer.appendChild(checkboxWrapper);\n        });\n    } catch (error) {\n        $ec20bab3ea3d9aa0$var$categoriesContainer.innerHTML = \"Could not load categories.\";\n        console.error(\"Failed to load categories\", error);\n    }\n}\n/**\n * Handles the form submission for creating a new post.\n */ $ec20bab3ea3d9aa0$var$postForm.addEventListener(\"submit\", async (e)=>{\n    e.preventDefault();\n    $ec20bab3ea3d9aa0$var$errorMessage.style.display = \"none\";\n    const formData = new FormData($ec20bab3ea3d9aa0$var$postForm);\n    const title = formData.get(\"title\");\n    const content = formData.get(\"content\");\n    const categoryIds = formData.getAll(\"categoryIds\"); // Gets all checked category IDs\n    try {\n        const newPost = await $e1C8v.createPost({\n            title: title,\n            content: content,\n            categoryIds: categoryIds\n        });\n        // Redirect to the new post's page or the homepage\n        window.location.href = `/`; // Or use `/post.html?id=${newPost.id}`\n    } catch (error) {\n        $ec20bab3ea3d9aa0$var$errorMessage.textContent = error.message;\n        $ec20bab3ea3d9aa0$var$errorMessage.style.display = \"block\";\n    }\n});\n// Initial setup when the page loads\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    $ec20bab3ea3d9aa0$var$loadCategories();\n});\n\n\n//# sourceMappingURL=create-post.4789e895.js.map\n","const BASE_URL = '/api';\n\n// Generic fetch function\nasync function request(url, options = {}) {\n  try {\n    const response = await fetch(BASE_URL + url, options);\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'An unknown error occurred');\n    }\n    if (response.status === 204) { // No Content\n      return null;\n    }\n    return response.json();\n  } catch (error) {\n    console.error('API request error:', error);\n    throw error;\n  }\n}\n\n// Auth API\nexport const login = (email, password) => request('/auth/login', {\n  method: 'POST',\n  headers: {'Content-Type': 'application/json'},\n  body: JSON.stringify({email, password}),\n});\n\nexport const register = (username, email, password) => request('/auth/register', {\n  method: 'POST',\n  headers: {'Content-Type': 'application/json'},\n  body: JSON.stringify({username, email, password}),\n});\n\nexport const logout = () => request('/auth/logout', {method: 'POST'});\n\n// Posts API\nexport const getPosts = (categoryId = null) => {\n  const url = categoryId ? `/posts?category=${categoryId}` : '/posts';\n  return request(url);\n};\n\nexport const createPost = (postData) =>\n  request(\"/posts\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(postData),\n  });\n\nexport const getPostById = (postId) => request(`/posts/${postId}`);\n\nexport const updatePost = (postId, postData) =>\n  request(`/posts/${postId}`, {\n    method: \"PUT\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(postData),\n  });\n\n// Categories API\nexport const getCategories = () => request(\"/categories\");\n","import * as api from \"./api.js\";\n\nconst postForm = document.getElementById(\"post-form\");\nconst categoriesContainer = document.getElementById(\"categories-container\");\nconst errorMessage = document.getElementById(\"form-error\");\n\n/**\n * Fetches categories and populates them as checkboxes in the form.\n */\nasync function loadCategories() {\n  try {\n    const categories = await api.getCategories();\n    categoriesContainer.innerHTML = \"\"; // Clear loader/previous content\n    categories.forEach((category) => {\n      const checkboxWrapper = document.createElement(\"div\");\n      checkboxWrapper.className = \"checkbox-item\";\n      checkboxWrapper.innerHTML = `\n        <input type=\"checkbox\" id=\"category-${category.id}\" name=\"categoryIds\" value=\"${category.id}\">\n        <label for=\"category-${category.id}\">${category.name}</label>\n      `;\n      categoriesContainer.appendChild(checkboxWrapper);\n    });\n  } catch (error) {\n    categoriesContainer.innerHTML = \"Could not load categories.\";\n    console.error(\"Failed to load categories\", error);\n  }\n}\n\n/**\n * Handles the form submission for creating a new post.\n */\npostForm.addEventListener(\"submit\", async (e) => {\n  e.preventDefault();\n  errorMessage.style.display = \"none\";\n\n  const formData = new FormData(postForm);\n  const title = formData.get(\"title\");\n  const content = formData.get(\"content\");\n  const categoryIds = formData.getAll(\"categoryIds\"); // Gets all checked category IDs\n\n  try {\n    const newPost = await api.createPost({ title, content, categoryIds });\n    // Redirect to the new post's page or the homepage\n    window.location.href = `/`; // Or use `/post.html?id=${newPost.id}`\n  } catch (error) {\n    errorMessage.textContent = error.message;\n    errorMessage.style.display = \"block\";\n  }\n});\n\n// Initial setup when the page loads\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  loadCategories();\n});\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$a35ebdc10bcdb39c$var$request","url","options","response","fetch","$a35ebdc10bcdb39c$var$BASE_URL","ok","errorData","json","message","status","error","console","$a35ebdc10bcdb39c$export$a0973bcfe11b05c9","$a35ebdc10bcdb39c$export$3790dc04c854c4c9","$a35ebdc10bcdb39c$export$e1bef8d96c7ba086","$a35ebdc10bcdb39c$export$7a0f33e8df10bd94","method","categoryId","postData","headers","body","JSON","stringify","$e1C8v","$ec20bab3ea3d9aa0$var$postForm","document","getElementById","$ec20bab3ea3d9aa0$var$categoriesContainer","$ec20bab3ea3d9aa0$var$errorMessage","$ec20bab3ea3d9aa0$var$loadCategories","categories","getCategories","innerHTML","forEach","category","checkboxWrapper","createElement","className","name","appendChild","addEventListener","preventDefault","style","display","formData","FormData","title","content","categoryIds","getAll","createPost","window","location","href","textContent"],"version":3,"file":"create-post.4789e895.js.map"}