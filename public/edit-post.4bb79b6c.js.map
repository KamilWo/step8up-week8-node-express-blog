{"mappings":"A,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,I,E,E,SCEA,MAAM,EAAW,SAAS,cAAc,CAAC,aACnC,EAAa,SAAS,cAAc,CAAC,SACrC,EAAe,SAAS,cAAc,CAAC,WACvC,EAAsB,SAAS,cAAc,CAAC,wBAC9C,EAAe,SAAS,cAAc,CAAC,cAEvC,EAAS,IAAI,gBAAgB,OAAO,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,MAK/D,eAAe,IACb,GAAI,CAAC,EAAQ,CACX,OAAO,QAAQ,CAAC,IAAI,CAAG,IACvB,MACF,CAEA,GAAI,CAEF,GAAM,CAAC,EAAM,EAAc,CAAG,MAAM,QAAQ,GAAG,CAAC,CAC9C,EAAA,WAAA,CAAgB,GAChB,EAAA,aAAA,GACD,CAGD,CAAA,EAAW,KAAK,CAAG,EAAK,KAAK,CAC7B,EAAa,KAAK,CAAG,EAAK,OAAO,CAGjC,IAAM,EAAkB,IAAI,IAAI,EAAK,UAAU,CAAC,GAAG,CAAC,AAAC,GAAQ,EAAI,EAAE,GAGnE,EAAc,OAAO,CAAC,AAAC,IACrB,IAAM,EAAY,EAAgB,GAAG,CAAC,EAAS,EAAE,EAC3C,EAAkB,SAAS,aAAa,CAAC,MAC/C,CAAA,EAAgB,SAAS,CAAG,gBAC5B,EAAgB,SAAS,CAAG;AACU,4CAAA,EAAE,EAAS,EAAE,CAAC,4BAA4B,EAAE,EAAS,EAAE,CAAC,EAAE,EAAE,EAAY,UAAY,GAAG;AACtG,6BAAA,EAAE,EAAS,EAAE,CAAC,EAAE,EAAE,EAAS,IAAI,CAAC;AACvD,MAAA,CAAC,CACD,EAAoB,WAAW,CAAC,EAClC,EACF,CAAE,MAAO,EAAO,CACd,EAAa,WAAW,CAAG,CAAC,0BAA0B,EAAE,EAAM,OAAO,CAAA,CAAE,CACvE,EAAa,KAAK,CAAC,OAAO,CAAG,OAC/B,CACF,CAKA,EAAS,gBAAgB,CAAC,SAAU,MAAO,IACzC,EAAE,cAAc,GAChB,EAAa,KAAK,CAAC,OAAO,CAAG,OAE7B,IAAM,EAAW,IAAI,SAAS,GACxB,EAAc,CAClB,MAAO,EAAS,GAAG,CAAC,SACpB,QAAS,EAAS,GAAG,CAAC,WACtB,YAAa,EAAS,MAAM,CAAC,cAC/B,EAEA,GAAI,CACF,MAAM,EAAA,UAAA,CAAe,EAAQ,GAE7B,OAAO,QAAQ,CAAC,IAAI,CAAG,CAAC,cAAc,EAAE,EAAA,CAAQ,AAClD,CAAE,MAAO,EAAO,CACd,EAAa,WAAW,CAAG,CAAC,uBAAuB,EAAE,EAAM,OAAO,CAAA,CAAE,CACpE,EAAa,KAAK,CAAC,OAAO,CAAG,OAC/B,CACF,GAGA,SAAS,gBAAgB,CAAC,mBAAoB","sources":["<anon>","src/client/assets/js/edit-post.js"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire6684\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire6684\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $e1C8v = parcelRequire(\"e1C8v\");\nconst $c097aaa7177f6cab$var$postForm = document.getElementById(\"post-form\");\nconst $c097aaa7177f6cab$var$titleInput = document.getElementById(\"title\");\nconst $c097aaa7177f6cab$var$contentInput = document.getElementById(\"content\");\nconst $c097aaa7177f6cab$var$categoriesContainer = document.getElementById(\"categories-container\");\nconst $c097aaa7177f6cab$var$errorMessage = document.getElementById(\"form-error\");\nconst $c097aaa7177f6cab$var$postId = new URLSearchParams(window.location.search).get(\"id\");\n/**\n * Fetches post and category data, then populates the form.\n */ async function $c097aaa7177f6cab$var$populateForm() {\n    if (!$c097aaa7177f6cab$var$postId) {\n        window.location.href = \"/\"; // Redirect if no ID is present\n        return;\n    }\n    try {\n        // Fetch post data and all available categories concurrently\n        const [post, allCategories] = await Promise.all([\n            $e1C8v.getPostById($c097aaa7177f6cab$var$postId),\n            $e1C8v.getCategories()\n        ]);\n        // Pre-fill the title and content fields\n        $c097aaa7177f6cab$var$titleInput.value = post.title;\n        $c097aaa7177f6cab$var$contentInput.value = post.content;\n        // Get a set of the post's current category IDs for easy lookup\n        const postCategoryIds = new Set(post.categories.map((cat)=>cat.id));\n        // Create checkboxes for all categories and check the ones associated with the post\n        allCategories.forEach((category)=>{\n            const isChecked = postCategoryIds.has(category.id);\n            const checkboxWrapper = document.createElement(\"div\");\n            checkboxWrapper.className = \"checkbox-item\";\n            checkboxWrapper.innerHTML = `\n        <input type=\"checkbox\" id=\"category-${category.id}\" name=\"categoryIds\" value=\"${category.id}\" ${isChecked ? \"checked\" : \"\"}>\n        <label for=\"category-${category.id}\">${category.name}</label>\n      `;\n            $c097aaa7177f6cab$var$categoriesContainer.appendChild(checkboxWrapper);\n        });\n    } catch (error) {\n        $c097aaa7177f6cab$var$errorMessage.textContent = `Failed to load post data: ${error.message}`;\n        $c097aaa7177f6cab$var$errorMessage.style.display = \"block\";\n    }\n}\n/**\n * Handles the form submission to update the post.\n */ $c097aaa7177f6cab$var$postForm.addEventListener(\"submit\", async (e)=>{\n    e.preventDefault();\n    $c097aaa7177f6cab$var$errorMessage.style.display = \"none\";\n    const formData = new FormData($c097aaa7177f6cab$var$postForm);\n    const updatedData = {\n        title: formData.get(\"title\"),\n        content: formData.get(\"content\"),\n        categoryIds: formData.getAll(\"categoryIds\")\n    };\n    try {\n        await $e1C8v.updatePost($c097aaa7177f6cab$var$postId, updatedData);\n        // Redirect to the newly updated post's page\n        window.location.href = `/post.html?id=${$c097aaa7177f6cab$var$postId}`;\n    } catch (error) {\n        $c097aaa7177f6cab$var$errorMessage.textContent = `Failed to update post: ${error.message}`;\n        $c097aaa7177f6cab$var$errorMessage.style.display = \"block\";\n    }\n});\n// Initial setup when the page loads\ndocument.addEventListener(\"DOMContentLoaded\", $c097aaa7177f6cab$var$populateForm);\n\n\n//# sourceMappingURL=edit-post.4bb79b6c.js.map\n","import * as api from \"./api.js\";\n\nconst postForm = document.getElementById(\"post-form\");\nconst titleInput = document.getElementById(\"title\");\nconst contentInput = document.getElementById(\"content\");\nconst categoriesContainer = document.getElementById(\"categories-container\");\nconst errorMessage = document.getElementById(\"form-error\");\n\nconst postId = new URLSearchParams(window.location.search).get(\"id\");\n\n/**\n * Fetches post and category data, then populates the form.\n */\nasync function populateForm() {\n  if (!postId) {\n    window.location.href = \"/\"; // Redirect if no ID is present\n    return;\n  }\n\n  try {\n    // Fetch post data and all available categories concurrently\n    const [post, allCategories] = await Promise.all([\n      api.getPostById(postId),\n      api.getCategories(),\n    ]);\n\n    // Pre-fill the title and content fields\n    titleInput.value = post.title;\n    contentInput.value = post.content;\n\n    // Get a set of the post's current category IDs for easy lookup\n    const postCategoryIds = new Set(post.categories.map((cat) => cat.id));\n\n    // Create checkboxes for all categories and check the ones associated with the post\n    allCategories.forEach((category) => {\n      const isChecked = postCategoryIds.has(category.id);\n      const checkboxWrapper = document.createElement(\"div\");\n      checkboxWrapper.className = \"checkbox-item\";\n      checkboxWrapper.innerHTML = `\n        <input type=\"checkbox\" id=\"category-${category.id}\" name=\"categoryIds\" value=\"${category.id}\" ${isChecked ? \"checked\" : \"\"}>\n        <label for=\"category-${category.id}\">${category.name}</label>\n      `;\n      categoriesContainer.appendChild(checkboxWrapper);\n    });\n  } catch (error) {\n    errorMessage.textContent = `Failed to load post data: ${error.message}`;\n    errorMessage.style.display = \"block\";\n  }\n}\n\n/**\n * Handles the form submission to update the post.\n */\npostForm.addEventListener(\"submit\", async (e) => {\n  e.preventDefault();\n  errorMessage.style.display = \"none\";\n\n  const formData = new FormData(postForm);\n  const updatedData = {\n    title: formData.get(\"title\"),\n    content: formData.get(\"content\"),\n    categoryIds: formData.getAll(\"categoryIds\"),\n  };\n\n  try {\n    await api.updatePost(postId, updatedData);\n    // Redirect to the newly updated post's page\n    window.location.href = `/post.html?id=${postId}`;\n  } catch (error) {\n    errorMessage.textContent = `Failed to update post: ${error.message}`;\n    errorMessage.style.display = \"block\";\n  }\n});\n\n// Initial setup when the page loads\ndocument.addEventListener(\"DOMContentLoaded\", populateForm);\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$e1C8v","$c097aaa7177f6cab$var$postForm","document","getElementById","$c097aaa7177f6cab$var$titleInput","$c097aaa7177f6cab$var$contentInput","$c097aaa7177f6cab$var$categoriesContainer","$c097aaa7177f6cab$var$errorMessage","$c097aaa7177f6cab$var$postId","URLSearchParams","window","location","search","get","$c097aaa7177f6cab$var$populateForm","href","post","allCategories","Promise","all","getPostById","getCategories","value","title","content","postCategoryIds","Set","categories","map","cat","forEach","category","isChecked","has","checkboxWrapper","createElement","className","innerHTML","name","appendChild","error","textContent","message","style","display","addEventListener","e","preventDefault","formData","FormData","updatedData","categoryIds","getAll","updatePost"],"version":3,"file":"edit-post.4bb79b6c.js.map"}